
export interface Vulnerability {
  id: number;
  title: string;
  description: string;
  severity: string;
  tags: string[];
  companyName: string;
  companyId: number;
  protocolName: string;
  protocolId: number;
  auditorName: string;
  auditorId: number;
  reportName: string;
  reportId: number;
  picturesContainerGuid: string;
  date: Date;
  status: string;
  reportUrl?: string; // Optional URL for detailed report
  images?: string[]; // Array of image URLs
  lastActionBy?: string;
  lastActionAt?: string;
  category: VulnerabilityCategory;
}

export interface VulnerabilitySeverity {
  id: number;
  name: string;
}

export interface VulnerabilitySource {
  id: number;
  name: string;
  url: string;
}

export interface VulnerabilitySearch {
  severities?: string[]; 
  tags?: string[];
  reports?: string[]; 
  protocols?: string[];
  companies?: string[];
  auditors?: string[];
  searchText?: string; 
  from?: string;
  to?: string;
  sortBy?: 'date' | 'severity';
  sortDirection?: 'asc' | 'desc';
  page?: number;
  pageSize?: number;
  categories?: number[];
}

export interface VulnerabilityStatistics {
  total: number;
  bySeverity: Record<string, number>;
  byTag: Record<string, number>;
}

export interface StatisticsChanges {
  total: number;
  new: number;
}

export enum VulnerabilityCategory {
  Valid = 0,
  ValidNotFixed = 1,
  ValidPartiallyFixed = 2,
  Invalid = 3,
  NA = 100
}

export interface VulnerabilityCategoryInfo {
  id: VulnerabilityCategory;
  label: string;
  color: string;
}

export const VulnerabilityCategories: VulnerabilityCategoryInfo[] = [
  {
    id: VulnerabilityCategory.Valid,
    label: 'Valid (Fixed)',
    color: '#4caf50' // Green
  },
  {
    id: VulnerabilityCategory.ValidNotFixed,
    label: 'Valid (Not Fixed)',
    color: '#ff9800' // Orange
  },
  {
    id: VulnerabilityCategory.ValidPartiallyFixed,
    label: 'Valid (Partially Fixed)',
    color: '#ffb74d' // Light Orange
  },
  {
    id: VulnerabilityCategory.Invalid,
    label: 'Invalid',
    color: '#f44336' // Red
  },
  {
    id: VulnerabilityCategory.NA,
    label: 'N/A',
    color: '#9e9e9e' // Grey
  }
];

export function getCategoryLabel(category: VulnerabilityCategory): string {
  return VulnerabilityCategories[category]?.label || 'Unknown';
}

export function getCategoryColor(category: VulnerabilityCategory): string {
  return VulnerabilityCategories[category]?.color || '#757575'; // Default to grey if not found
}

export function getCategoryIdByLabel(label: string): VulnerabilityCategory | null {
  const entry = Object.entries(VulnerabilityCategories).find(([_, value]) => value.label === label);
  return entry ? Number(entry[0]) as VulnerabilityCategory : null;
}

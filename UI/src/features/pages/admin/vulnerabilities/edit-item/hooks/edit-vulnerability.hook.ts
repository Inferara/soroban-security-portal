import { useEffect, useState } from 'react';
import { 
  editVulnerabilityCall, 
  getVulnerabilityByIdCall,
  getSeveritiesCall, 
  getCategoriesCall, 
  getProjectListDataCall, 
  getSourceCall, 
  getAuditorListDataCall,
} from '../../../../../../api/soroban-security-portal/soroban-security-portal-api';
import { useAppDispatch } from '../../../../../../app/hooks';
import { CurrentPageState, setCurrentPage } from '../../../admin-main-window/current-page-slice';
import { useSearchParams } from 'react-router-dom';
import { Vulnerability, VulnerabilitySeverity, VulnerabilitySource } from '../../../../../../api/soroban-security-portal/models/vulnerability';
import { ProjectItem } from '../../../../../../api/soroban-security-portal/models/project';
import { AuditorItem } from '../../../../../../api/soroban-security-portal/models/auditor';
import { CategoryItem } from '../../../../../../api/soroban-security-portal/models/category';

type UseEditVulnerabilityProps = {
    currentPageState: CurrentPageState;
};

export const useEditVulnerability = (props: UseEditVulnerabilityProps) => {
    const { currentPageState } = props;
    const dispatch = useAppDispatch();
    const [searchParams] = useSearchParams();
    const vulnerabilityId = parseInt(searchParams.get('vulnerabilityId') ?? '');
    const [vulnerability, setVulnerability] = useState<Vulnerability | null | undefined>(undefined);
    const [severitiesList, setSeveritiesList] = useState<VulnerabilitySeverity[]>([]);
    const [categoriesList, setCategoriesList] = useState<CategoryItem[]>([]);
    const [projectsList, setProjectsList] = useState<ProjectItem[]>([]);
    const [sourceList, setSourceList] = useState<VulnerabilitySource[]>([]);
    const [auditorsList, setAuditorsList] = useState<AuditorItem[]>([]);

    const editVulnerability = async (vulnerabilityItem: Vulnerability): Promise<boolean> => {
        const response = await editVulnerabilityCall(vulnerabilityItem);
        return response;
    };

    const getVulnerabilityById = async (): Promise<void> => {
        if (vulnerabilityId) {
          const response = await getVulnerabilityByIdCall(vulnerabilityId);
          setVulnerability(response);
        } else {
          setVulnerability(null);
        }
      };

    const getSeverities = async (): Promise<void> => {
        const response = await getSeveritiesCall();
        setSeveritiesList(response);
    };

    const getCategories = async (): Promise<void> => {
        const response = await getCategoriesCall();
        setCategoriesList(response);
    };

    const getProjects = async (): Promise<void> => {
        const response = await getProjectListDataCall();
        setProjectsList(response);
    };

    const getAuditors = async (): Promise<void> => {
        const response = await getAuditorListDataCall();
        setAuditorsList(response);
    };

    const getSource = async (): Promise<void> => {
        const response = await getSourceCall();
        setSourceList(response);
    };

    // Set the current page
    useEffect(() => {
        dispatch(setCurrentPage(currentPageState));
        void getVulnerabilityById();
        void getSeverities();
        void getCategories();
        void getProjects();
        void getAuditors();
        void getSource();
    }, [dispatch]);

    return {
        editVulnerability, 
        vulnerability, 
        vulnerabilityId,
        severitiesList,
        categoriesList,
        projectsList,
        auditorsList,
        sourceList,
    };
}; 
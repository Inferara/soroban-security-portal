import { useEffect, useState } from 'react';
import { 
  editVulnerabilityCall, 
  getVulnerabilityByIdCall,
  getSeveritiesCall, 
  getCategoriesCall, 
  getProtocolListDataCall, 
  getSourceCall, 
  getAuditorListDataCall,
  getFilesCall,
  deleteFileCall,
  getCompanyListDataCall,
} from '../../../../../../api/soroban-security-portal/soroban-security-portal-api';
import { useAppDispatch } from '../../../../../../app/hooks';
import { CurrentPageState, setCurrentPage } from '../../../admin-main-window/current-page-slice';
import { useSearchParams } from 'react-router-dom';
import { Vulnerability, VulnerabilitySeverity, VulnerabilitySource } from '../../../../../../api/soroban-security-portal/models/vulnerability';
import { ProtocolItem } from '../../../../../../api/soroban-security-portal/models/protocol';
import { AuditorItem } from '../../../../../../api/soroban-security-portal/models/auditor';
import { CategoryItem } from '../../../../../../api/soroban-security-portal/models/category';
import { CompanyItem } from '../../../../../../api/soroban-security-portal/models/company';

type UseEditVulnerabilityProps = {
    currentPageState: CurrentPageState;
};

export const useEditVulnerability = (props: UseEditVulnerabilityProps) => {
    const { currentPageState } = props;
    const dispatch = useAppDispatch();
    const [searchParams] = useSearchParams();
    const vulnerabilityId = parseInt(searchParams.get('vulnerabilityId') ?? '');
    const [vulnerability, setVulnerability] = useState<Vulnerability | null | undefined>(undefined);
    const [severitiesList, setSeveritiesList] = useState<VulnerabilitySeverity[]>([]);
    const [categoriesList, setCategoriesList] = useState<CategoryItem[]>([]);
    const [protocolsList, setProtocolsList] = useState<ProtocolItem[]>([]);
    const [companiesList, setCompaniesList] = useState<CompanyItem[]>([]);
    const [sourceList, setSourceList] = useState<VulnerabilitySource[]>([]);
    const [auditorsList, setAuditorsList] = useState<AuditorItem[]>([]);
    const [isUploading, setIsUploading] = useState(false);
    const [existingImages, setExistingImages] = useState<string[]>([]);

    const editVulnerability = async (vulnerabilityItem: Vulnerability, images?: File[]): Promise<boolean> => {
        setIsUploading(true);
        try {
            if (images && images.length > 0) {
                const formData = new FormData();
                formData.append('vulnerability', JSON.stringify(vulnerabilityItem));
                images.forEach((image) => {
                    formData.append(`images`, image);
                });
                const response = await editVulnerabilityCall(formData);
                return response;
            } else {
                const response = await editVulnerabilityCall(vulnerabilityItem);
                return response;
            }
        } catch (error) {
            console.error('Error editing vulnerability:', error);
            throw error;
        } finally {
            setIsUploading(false);
        }
    };

    const getVulnerabilityById = async (): Promise<void> => {
        if (vulnerabilityId) {
          const response = await getVulnerabilityByIdCall(vulnerabilityId);
          setVulnerability(response);
        } else {
          setVulnerability(null);
        }
      };

    const getSeverities = async (): Promise<void> => {
        const response = await getSeveritiesCall();
        setSeveritiesList(response);
    };

    const getExistingImages = async (vulnerability: Vulnerability): Promise<void> => {
        const response = await getFilesCall(vulnerability.picturesContainerGuid);
        setExistingImages(response);
    };

    const deleteImage = async (containerGuid: string, fileName: string): Promise<void> => {
        const response = await deleteFileCall(containerGuid, fileName);
        debugger;
        if (response && vulnerability) {
            void getExistingImages(vulnerability);
        }
    };

    const getCategories = async (): Promise<void> => {
        const response = await getCategoriesCall();
        setCategoriesList(response);
    };

    const getProtocols = async (): Promise<void> => {
        const response = await getProtocolListDataCall();
        setProtocolsList(response);
    };

    const getCompanies = async (): Promise<void> => {
        const response = await getCompanyListDataCall();
        setCompaniesList(response);
    };

    const getAuditors = async (): Promise<void> => {
        const response = await getAuditorListDataCall();
        setAuditorsList(response);
    };

    const getSource = async (): Promise<void> => {
        const response = await getSourceCall();
        setSourceList(response);
    };

    // Set the current page
    useEffect(() => {
        dispatch(setCurrentPage(currentPageState));
        void getVulnerabilityById();
        void getSeverities();
        void getCategories();
        void getProtocols();
        void getCompanies();
        void getAuditors();
        void getSource();
    }, [dispatch]);

    useEffect(() => {
        if (vulnerability?.picturesContainerGuid) {
            void getExistingImages(vulnerability);
        }
    }, [vulnerability?.picturesContainerGuid]);

    return {
        editVulnerability, 
        deleteImage,
        existingImages,
        vulnerability, 
        vulnerabilityId,
        severitiesList,
        categoriesList,
        protocolsList,
        companiesList,
        auditorsList,
        sourceList,
        isUploading,
    };
}; 
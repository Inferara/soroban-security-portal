import { Box, Button, Card, CardContent, Chip, IconButton, Stack, Typography, Link as MuiLink, Modal } from "@mui/material";
import { FC, useState } from "react";
import { CodeBlock } from "../../../../components/CodeBlock";
import { Report } from "../../../../api/soroban-security-portal/models/report";
import { ProtocolItem } from "../../../../api/soroban-security-portal/models/protocol";
import CloseIcon from '@mui/icons-material/Close';
import ReactMarkdown from "react-markdown";
import remarkParse from "remark-parse";
import remarkGfm from "remark-gfm";
import rehypeKatex from "rehype-katex";
import rehypeRaw from "rehype-raw";
import remarkMath from "remark-math";
import remarkRehype from "remark-rehype";
import { useTheme } from "../../../../contexts/ThemeContext";

interface VulnerabilityCardProps {
    selectedVulnerability: any;
    reportsList: Report[];
    protocolsList: ProtocolItem[];
    handleCloseProfile: () => void;
    handleChipClick: (filterType: string, value: string) => void;
    handleDownloadReport: (reportId: number) => void;
    isModal?: boolean;
}

export const VulnerabilityCard: FC<VulnerabilityCardProps> = ({
    selectedVulnerability,
    reportsList,
    protocolsList,
    handleCloseProfile,
    handleChipClick,
    handleDownloadReport,
    isModal = false
}) => {
    const { themeMode } = useTheme();
    const [modalOpened, setModalOpened] = useState(isModal);

    const handleCloseModal = () => {
        setModalOpened(false);
        handleCloseProfile();
    };

    // shared styles to avoid overlap / truncation issues
    const rowSx = {
        display: 'flex',
        alignItems: 'start',
        gap: 1,
        flexWrap: 'wrap' as const, // allow wrapping to the next line
        minWidth: 0                 // allow children to shrink, enabling ellipsis
    };

    const chipBaseHover = {
        cursor: 'pointer',
        '&:hover': {
            opacity: 0.8,
            transform: 'scale(1.05)',
            transition: 'all 0.2s ease-in-out'
        }
    };

    const chipEllipsisSx = {
        border: '2px solid',
        backgroundColor: 'transparent',
        fontWeight: 700,
        maxWidth: { xs: '80%', sm: 300, lg: '90%' },
        // ellipsis must be on the label node
        '& .MuiChip-label': {
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap',
            maxWidth: '100%',
            display: 'block'
        },
        ...chipBaseHover
    };

    const content = (
        <Box sx={{
            width: isModal ? '100%' : '50%',
            overflow: 'auto',
            transition: 'width 0.3s ease-in-out',
            '&::-webkit-scrollbar': { width: '12px' },
            '&::-webkit-scrollbar-track': { backgroundColor: 'rgba(0, 0, 0, 0.1)', borderRadius: '4px' },
            '&::-webkit-scrollbar-thumb': {
                backgroundColor: 'rgba(0, 0, 0, 0.3)',
                borderRadius: '4px',
                '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.5)' },
            },
            '&::-webkit-scrollbar-corner': { backgroundColor: 'transparent' },
            pr: isModal ? 1 : 0,
            pt: isModal ? 2 : 0,
            pb: isModal ? 1 : 0,
        }}>
            <Box sx={{ pl: 1, pr: 1 }}>
                <Card sx={{
                    borderRadius: '20px',
                    border: '1px solid',
                    backgroundColor: themeMode === 'light' ? '#fafafa' : '#1A1A1A',
                    mb: 3
                }}>
                    <CardContent sx={{ overflow: 'auto', height: '90vh' }}>
                        <Box sx={{ mb: 2 }}>
                            <Stack spacing={1}>
                                <Box sx={{ display: 'flex', flexDirection: 'row' }}>
                                    <Typography variant='h6' sx={{ fontWeight: 600, flexGrow: 1, textTransform: 'uppercase' }}>
                                        {selectedVulnerability.title}
                                    </Typography>
                                    <IconButton
                                        onClick={handleCloseProfile}
                                        sx={{
                                            color: themeMode === 'light' ? 'text.secondary' : 'text.disabled',
                                            '&:hover': { color: 'text.primary' }
                                        }}
                                    >
                                        <CloseIcon />
                                    </IconButton>
                                </Box>

                                {/* Severity */}
                                <Box sx={{ ...rowSx }}>
                                    <Typography variant="body2" color="text.primary" sx={{ whiteSpace: 'nowrap' }}>Severity:</Typography>
                                    <Chip
                                        label={selectedVulnerability.severity}
                                        size="small"
                                        sx={{
                                            ...chipEllipsisSx,
                                            borderColor: (() => {
                                                switch (selectedVulnerability.severity) {
                                                    case 'Critical': return '#c72e2b95';
                                                    case 'High': return '#FF6B3D95';
                                                    case 'Medium': return '#FFD84D95';
                                                    case 'Low': return '#569E6795';
                                                    case 'Note': return '#72F1FF95';
                                                    default: return '#e0e0e0';
                                                }
                                            })(),
                                        }}
                                        onClick={() => handleChipClick('severity', selectedVulnerability.severity)}
                                    />
                                </Box>

                                {/* Report info + action */}
                                {selectedVulnerability.reportName && (
                                    <Box sx={{ ...rowSx, flexDirection: { md: 'column', lg: 'row' } }}>
                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, minWidth: 0, flex: 1 }}>
                                            <Typography variant="body2" color="text.primary" sx={{ whiteSpace: 'nowrap' }}>
                                                Report:
                                            </Typography>
                                            <Chip
                                                label={selectedVulnerability.reportName}
                                                size="small"
                                                sx={chipEllipsisSx}
                                                onClick={() => handleChipClick('source', selectedVulnerability.reportName)}
                                            />
                                        </Box>

                                        {selectedVulnerability.reportName === 'External' ? (
                                            <MuiLink
                                                href={selectedVulnerability.reportUrl}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                sx={{ textDecoration: 'none', flexShrink: 0, width: { xs: '100%', sm: 'auto' } }}
                                                onClick={(e) => e.stopPropagation()}
                                            >
                                                <Button
                                                    variant="contained"
                                                    size="small"
                                                    sx={{ textTransform: 'none', width: { xs: '100%', sm: 150 }, height: 30 }}
                                                >
                                                    View Report
                                                </Button>
                                            </MuiLink>
                                        ) : (() => {
                                            const report = reportsList.find(r => r.name === selectedVulnerability.reportName);
                                            if (report) {
                                                return (
                                                    <Button
                                                        variant="contained"
                                                        size="small"
                                                        onClick={(e) => { e.stopPropagation(); handleDownloadReport(report.id); }}
                                                        sx={{ textTransform: 'none', width: { xs: '100%', sm: 150 }, height: 30, flexShrink: 0 }}
                                                    >
                                                        Download Report
                                                    </Button>
                                                );
                                            }
                                            return (
                                                <Typography variant="caption" color="text.disabled">No report available</Typography>
                                            );
                                        })()}
                                    </Box>
                                )}

                                {/* Company */}
                                <Box sx={{ ...rowSx }}>
                                    <Typography variant="body2" color="text.primary" sx={{ whiteSpace: 'nowrap' }}>Company:</Typography>
                                    <Chip
                                        label={selectedVulnerability.companyName}
                                        size="small"
                                        sx={chipEllipsisSx}
                                        onClick={() => handleChipClick('company', selectedVulnerability.companyName)}
                                    />
                                </Box>

                                {/* Protocol + source code action */}
                                <Box sx={{ ...rowSx, flexDirection: { md: 'column', lg: 'row' } }}>
                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, minWidth: 0, flex: 1 }}>
                                        <Typography variant="body2" color="text.primary" sx={{ whiteSpace: 'nowrap' }}>Protocol:</Typography>
                                        <Chip
                                            label={selectedVulnerability.protocolName}
                                            size="small"
                                            sx={chipEllipsisSx}
                                            onClick={() => handleChipClick('protocol', selectedVulnerability.protocolName)}
                                        />
                                    </Box>

                                    <MuiLink
                                        href={(protocolsList.find(p => p.name === selectedVulnerability.protocolName)?.url) || '#'}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        sx={{ textDecoration: 'none', flexShrink: 0, width: { xs: '100%', sm: 'auto' } }}
                                        onClick={(e) => {
                                            e.preventDefault();
                                            const protocol = protocolsList.find(p => p.name === selectedVulnerability.protocolName);
                                            if (protocol?.url) window.open(protocol.url, '_blank');
                                        }}
                                    >
                                        <Button
                                            variant="contained"
                                            size="small"
                                            sx={{
                                                color: 'background.default',
                                                borderColor: 'primary.main',
                                                backgroundColor: 'primary.main',
                                                textTransform: 'none',
                                                width: { xs: '100%', sm: 150 },
                                                height: 30,
                                                flexShrink: 0,
                                                '&:hover': {
                                                    backgroundColor: 'rgba(250, 250, 250, 0.1)',
                                                    borderColor: 'primary.main',
                                                    color: 'primary.main',
                                                },
                                            }}
                                        >
                                            View source code
                                        </Button>
                                    </MuiLink>
                                </Box>
                            </Stack>
                        </Box>

                        {/* Description */}
                        <Box sx={{ mb: 2 }}>
                            <Typography variant="h6" sx={{ mb: 1, fontWeight: 600, textTransform: 'uppercase' }}>Description</Typography>
                            <Box sx={{
                                '& .katex-display': { margin: '1em 0 !important', textAlign: 'center', overflowX: 'auto', overflowY: 'hidden' },
                                '& .katex': { fontSize: '1em !important', lineHeight: '1.2 !important' },
                                '& .katex-inline': { display: 'inline !important', margin: '0 !important', padding: '0 !important' }
                            }}>
                                <ReactMarkdown
                                    skipHtml={false}
                                    remarkPlugins={[remarkParse, remarkGfm, remarkMath, remarkRehype]}
                                    rehypePlugins={[rehypeRaw, rehypeKatex]}
                                    components={{
                                        code: (props) => {
                                            const { className, children, ...rest } = props as any;
                                            const inline = (props as any).inline;
                                            const match = /language-(\w+)/.exec(className || '');
                                            if (!inline && match) {
                                                return (
                                                    <CodeBlock className={className} {...rest}>
                                                        {String(children).replace(/\n$/, '')}
                                                    </CodeBlock>
                                                );
                                            }
                                            return (
                                                <CodeBlock className={className} inline={true} {...rest}>
                                                    {String(children).replace(/\n$/, '')}
                                                </CodeBlock>
                                            );
                                        },
                                        span: ({ className, children, ...props }) => {
                                            if (className && className.includes('math')) {
                                                return <span className={className} {...props}>{children}</span>;
                                            }
                                            return <span className={className} {...props}>{children}</span>;
                                        },
                                        div: ({ className, children, ...props }) => {
                                            if (className && className.includes('math')) {
                                                return <div className={className} {...props}>{children}</div>;
                                            }
                                            return <div className={className} {...props}>{children}</div>;
                                        }
                                    }}
                                >
                                    {selectedVulnerability.description.replace(/\\\$/g, '$')}
                                </ReactMarkdown>
                            </Box>
                        </Box>

                        <Box sx={{ display: 'flex', justifyContent: 'right' }}>
                            <Typography variant="body2" color="text.secondary">
                                Discovered: {new Date(selectedVulnerability.date).toLocaleDateString()}
                            </Typography>
                        </Box>
                    </CardContent>
                </Card>
            </Box>
        </Box>
    );

    return isModal ? (
        <Modal open={modalOpened} onClose={handleCloseModal}>
            {content}
        </Modal>
    ) : (
        content
    );
};

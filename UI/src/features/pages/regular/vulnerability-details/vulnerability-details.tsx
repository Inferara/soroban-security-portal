import { FC, useState } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Chip,
  Button,
  CircularProgress,
  Alert,
  Stack,
  useMediaQuery,
  useTheme,
  Avatar,
  Paper,
  Tabs,
  Tab
} from '@mui/material';

import { 
  ArrowBack, 
  OpenInNew, 
  Security, 
  Business, 
  Assessment,
  Dashboard,
  BugReport,
  Person} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import rehypeKatex from 'rehype-katex';
import rehypeRaw from 'rehype-raw';
import remarkMath from 'remark-math';
import { useVulnerabilityDetails } from './hooks/vulnerability-details.hook';
import { useTheme as useAppTheme, SeverityColors } from '../../../../contexts/ThemeContext';
import { environment } from '../../../../environments/environment';
import 'katex/dist/katex.min.css';

export const VulnerabilityDetails: FC = () => {
  const navigate = useNavigate();
  const theme = useTheme();
  const { themeMode } = useAppTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const {
    vulnerability,
    protocol,
    report,
    auditor,
    company,
    loading,
    error,
    vulnerabilityId
  } = useVulnerabilityDetails();

  const [tabValue, setTabValue] = useState(0);

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const getSeverityColor = (severity: string) => {
    const s = severity?.toLowerCase();
    if (s in SeverityColors) {
      return SeverityColors[s];
    }
    return theme.palette.grey[400];
  };

  const getCategoryColor = (category: number) => {
    const colors = ['#7b1fa2', '#1976d2', '#388e3c', '#f57c00', '#d32f2f'];
    return colors[category % colors.length] || colors[0];
  };

  const formatDate = (dateString: Date | string) => {
    try {
      return new Date(dateString).toLocaleDateString(undefined, {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch {
      return 'Unknown date';
    }
  };

  if (loading) {
    return (
      <Box 
        sx={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          minHeight: '50vh' 
        }}
      >
        <CircularProgress size={60} />
      </Box>
    );
  }

  if (error || !vulnerability) {
    return (
      <Box sx={{ p: 3 }}>
        <Button
          startIcon={<ArrowBack />}
          onClick={() => navigate(-1)}
          sx={{ mb: 2 }}
        >
          Back
        </Button>
        <Alert severity="error">
          {error || 'Vulnerability not found'}
        </Alert>
      </Box>
    );
  }

  return (
    <Box sx={{ p: { xs: 2, md: 3 }, maxWidth: '1200px', mx: 'auto' }}>
      {/* Header */}
      <Box sx={{ mb: 3 }}>
        <Button
          startIcon={<ArrowBack />}
          onClick={() => navigate(-1)}
          sx={{ mb: 2 }}
        >
          Back
        </Button>
        
        <Typography 
          variant={isMobile ? "h5" : "h4"} 
          sx={{ fontWeight: 600, mb: 1, wordBreak: 'break-word' }}
        >
          {vulnerability.title}
        </Typography>
        
        <Stack 
          direction={isMobile ? "column" : "row"} 
          spacing={2} 
          alignItems={isMobile ? "flex-start" : "center"}
          sx={{ mb: 2 }}
        >
          <Chip
            label={vulnerability.severity}
            sx={{
              backgroundColor: getSeverityColor(vulnerability.severity),
              color: '#fff',
              fontWeight: 600,
              fontSize: '0.9rem'
            }}
          />
          <Typography variant="body2" color="text.secondary">
            Discovered: {formatDate(vulnerability.date)}
          </Typography>
          <Typography variant="body2" color="text.secondary">
            ID: #{vulnerabilityId}
          </Typography>
        </Stack>
      </Box>

      {/* Tabs */}
      <Box sx={{ mb: 3, borderBottom: 1, borderColor: 'divider' }}>
        <Tabs 
          value={tabValue} 
          onChange={handleTabChange}
          variant={isMobile ? "fullWidth" : "standard"}
          sx={{
            '& .MuiTab-root': {
              textTransform: 'none',
              fontSize: '1rem',
              fontWeight: 600,
              minHeight: 64
            }
          }}
        >
          <Tab 
            icon={<Dashboard />} 
            iconPosition="start" 
            label="Overview" 
          />
          <Tab 
            icon={<BugReport />} 
            iconPosition="start" 
            label="Technical Details" 
          />
        </Tabs>
      </Box>

      {/* Tab Content */}
      {tabValue === 0 && (
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', md: 'row' },
        gap: 3
      }}>
        {/* Main Content */}
        <Box sx={{ flex: { md: 2 } }}>
          {/* Vulnerability Details */}
          <Card sx={{ mb: 3, borderRadius: 2, border: '1px solid', borderColor: 'divider' }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                <Security sx={{ mr: 1, verticalAlign: 'middle' }} />
                Vulnerability Details
              </Typography>
              
              <Box sx={{ mb: 3 }}>
                <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                  Description
                </Typography>
                <Paper 
                  sx={{ 
                    p: 2, 
                    backgroundColor: themeMode === 'light' ? '#fafafa' : '#1a1a1a',
                    border: '1px solid',
                    borderColor: 'divider'
                  }}
                >
                  <ReactMarkdown
                    remarkPlugins={[remarkGfm, remarkMath]}
                    rehypePlugins={[rehypeRaw, rehypeKatex]}
                    components={{
                      p: ({ children }) => (
                        <Typography variant="body2" sx={{ mb: 1, lineHeight: 1.6 }}>
                          {children}
                        </Typography>
                      ),
                      h1: ({ children }) => (
                        <Typography variant="h6" sx={{ fontWeight: 600, mb: 1 }}>
                          {children}
                        </Typography>
                      ),
                      h2: ({ children }) => (
                        <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 1 }}>
                          {children}
                        </Typography>
                      ),
                      code: ({ children }) => (
                        <Box
                          component="code"
                          sx={{
                            backgroundColor: themeMode === 'light' ? '#f5f5f5' : '#2d2d2d',
                            px: 0.5,
                            py: 0.25,
                            borderRadius: 0.5,
                            fontSize: '0.85rem',
                            fontFamily: 'monospace'
                          }}
                        >
                          {children}
                        </Box>
                      )
                    }}
                  >
                    {vulnerability.description}
                  </ReactMarkdown>
                </Paper>
              </Box>

              {/* Tags */}
              {vulnerability.tags && vulnerability.tags.length > 0 && (
                <Box sx={{ mb: 2 }}>
                  <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                    Tags
                  </Typography>
                  <Stack direction="row" spacing={1} flexWrap="wrap" gap={1}>
                    {vulnerability.tags.map((tag, index) => (
                      <Chip
                        key={index}
                        label={tag}
                        size="small"
                        sx={{ backgroundColor: getCategoryColor(index), color: '#fff' }}
                      />
                    ))}
                  </Stack>
                </Box>
              )}

              {/* Status */}
              <Box>
                <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                  Status
                </Typography>
                <Chip
                  label={vulnerability.status || 'Unknown'}
                  variant="outlined"
                  color={vulnerability.status?.toLowerCase() === 'fixed' ? 'success' : 'default'}
                />
              </Box>

              {/* Author */}
              {vulnerability.author && (
                <Box>
                  <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                    Author
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {vulnerability.author}
                  </Typography>
                </Box>
              )}

              {/* Category */}
              {vulnerability.category !== undefined && (
                <Box>
                  <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                    Category
                  </Typography>
                  <Chip
                    label={`Category ${vulnerability.category}`}
                    variant="outlined"
                    sx={{
                      backgroundColor: getCategoryColor(vulnerability.category) + '20',
                      borderColor: getCategoryColor(vulnerability.category),
                      color: getCategoryColor(vulnerability.category)
                    }}
                  />
                </Box>
              )}

              {/* Last Action */}
              {vulnerability.lastActionBy && vulnerability.lastActionAt && (
                <Box>
                  <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                    Last Modified
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    By {vulnerability.lastActionBy} on {formatDate(vulnerability.lastActionAt)}
                  </Typography>
                </Box>
              )}

              {/* Images */}
              {vulnerability.images && vulnerability.images.length > 0 && (
                <Box>
                  <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                    Attachments
                  </Typography>
                  <Box sx={{ 
                    display: 'grid', 
                    gridTemplateColumns: { xs: '1fr', sm: 'repeat(2, 1fr)', md: 'repeat(3, 1fr)' },
                    gap: 2
                  }}>
                    {vulnerability.images.map((image, index) => (
                      <Box
                        key={index}
                        component="img"
                        src={image}
                        alt={`Vulnerability evidence ${index + 1}`}
                        sx={{
                          width: '100%',
                          height: 'auto',
                          borderRadius: 1,
                          border: '1px solid',
                          borderColor: 'divider'
                        }}
                      />
                    ))}
                  </Box>
                </Box>
              )}
            </CardContent>
          </Card>
        </Box>

        {/* Sidebar */}
        <Box sx={{ flex: { md: 1 } }}>
          {/* Related Protocol */}
          {protocol && (
            <Card sx={{ mb: 3, borderRadius: 2, border: '1px solid', borderColor: 'divider' }}>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                  <Business sx={{ mr: 1, verticalAlign: 'middle' }} />
                  Protocol
                </Typography>
                
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Avatar sx={{ width: 40, height: 40, mr: 2, bgcolor: 'primary.main' }}>
                    <Business />
                  </Avatar>
                  <Box sx={{ flexGrow: 1 }}>
                    <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                      {protocol.name}
                    </Typography>
                    {company && (
                      <Typography variant="body2" color="text.secondary">
                        by {company.name}
                      </Typography>
                    )}
                  </Box>
                </Box>

                <Stack spacing={1}>
                  <Button
                    variant="outlined"
                    size="small"
                    startIcon={<OpenInNew />}
                    onClick={() => navigate(`/protocol/${protocol.id}`)}
                    fullWidth
                  >
                    View Protocol Details
                  </Button>
                  
                  {protocol.url && (
                    <Button
                      variant="text"
                      size="small"
                      startIcon={<OpenInNew />}
                      href={protocol.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      fullWidth
                    >
                      Visit Protocol Website
                    </Button>
                  )}
                </Stack>
              </CardContent>
            </Card>
          )}

          {/* Related Report */}
          {report && (
            <Card sx={{ mb: 3, borderRadius: 2, border: '1px solid', borderColor: 'divider' }}>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                  <Assessment sx={{ mr: 1, verticalAlign: 'middle' }} />
                  Audit Report
                </Typography>
                
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Avatar sx={{ width: 40, height: 40, mr: 2, bgcolor: 'secondary.main' }}>
                    <Assessment />
                  </Avatar>
                  <Box sx={{ flexGrow: 1 }}>
                    <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                      {report.name}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      Published: {formatDate(report.date)}
                    </Typography>
                  </Box>
                </Box>

                <Stack spacing={1}>
                  <Button
                    variant="outlined"
                    size="small"
                    startIcon={<OpenInNew />}
                    onClick={() => navigate(`/report/${report.id}`)}
                    fullWidth
                  >
                    View Report Details
                  </Button>
                  
                  <Button
                    variant="text"
                    size="small"
                    startIcon={<OpenInNew />}
                    href={`${environment.apiUrl}/api/v1/reports/${report.id}/download`}
                    target="_blank"
                    rel="noopener noreferrer"
                    fullWidth
                  >
                    Download Report PDF
                  </Button>
                </Stack>
              </CardContent>
            </Card>
          )}

          {/* Related Auditor */}
          {auditor && (
            <Card sx={{ borderRadius: 2, border: '1px solid', borderColor: 'divider' }}>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                  <Person sx={{ mr: 1, verticalAlign: 'middle' }} />
                  Auditor
                </Typography>
                
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Avatar sx={{ width: 40, height: 40, mr: 2, bgcolor: 'info.main' }}>
                    <Person />
                  </Avatar>
                  <Box sx={{ flexGrow: 1 }}>
                    <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                      {auditor.name}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      Security Auditor
                    </Typography>
                  </Box>
                </Box>

                <Stack spacing={1}>
                  <Button
                    variant="outlined"
                    size="small"
                    startIcon={<OpenInNew />}
                    onClick={() => navigate(`/auditor/${auditor.id}`)}
                    fullWidth
                  >
                    View Auditor Profile
                  </Button>
                  
                  {auditor.url && (
                    <Button
                      variant="text"
                      size="small"
                      startIcon={<OpenInNew />}
                      href={auditor.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      fullWidth
                    >
                      Visit Auditor Website
                    </Button>
                  )}
                </Stack>
              </CardContent>
            </Card>
          )}
        </Box>
      </Box>
      )}

      {/* Second Tab - Technical Details */}
      {tabValue === 1 && (
        <Box>
          <Card sx={{ borderRadius: 2, border: '1px solid', borderColor: 'divider' }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 3, fontWeight: 600 }}>
                <BugReport sx={{ mr: 1, verticalAlign: 'middle' }} />
                Technical Analysis
              </Typography>
              
              <Stack spacing={3}>
                <Box>
                  <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                    Vulnerability Type
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {vulnerability.title}
                  </Typography>
                </Box>

                <Box>
                  <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                    Severity Level
                  </Typography>
                  <Chip
                    label={vulnerability.severity}
                    sx={{
                      backgroundColor: getSeverityColor(vulnerability.severity),
                      color: '#fff',
                      fontWeight: 600
                    }}
                  />
                </Box>

                <Box>
                  <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                    Discovery Date
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {formatDate(vulnerability.date)}
                  </Typography>
                </Box>

                {vulnerability.description && (
                  <Box>
                    <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                      Technical Description
                    </Typography>
                    <Paper 
                      sx={{ 
                        p: 2, 
                        backgroundColor: themeMode === 'light' ? '#fafafa' : '#1a1a1a',
                        border: '1px solid',
                        borderColor: 'divider'
                      }}
                    >
                      <ReactMarkdown
                        remarkPlugins={[remarkGfm, remarkMath]}
                        rehypePlugins={[rehypeRaw, rehypeKatex]}
                        components={{
                          p: ({ children }) => (
                            <Typography variant="body2" sx={{ mb: 1, lineHeight: 1.6 }}>
                              {children}
                            </Typography>
                          ),
                          h1: ({ children }) => (
                            <Typography variant="h6" sx={{ fontWeight: 600, mb: 1 }}>
                              {children}
                            </Typography>
                          ),
                          h2: ({ children }) => (
                            <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 1 }}>
                              {children}
                            </Typography>
                          ),
                          code: ({ children }) => (
                            <Typography
                              component="code"
                              sx={{
                                backgroundColor: themeMode === 'light' ? '#f5f5f5' : '#2a2a2a',
                                padding: '2px 4px',
                                borderRadius: '4px',
                                fontSize: '0.875rem',
                                fontFamily: 'monospace'
                              }}
                            >
                              {children}
                            </Typography>
                          ),
                          pre: ({ children }) => (
                            <Box
                              component="pre"
                              sx={{
                                backgroundColor: themeMode === 'light' ? '#f5f5f5' : '#2a2a2a',
                                padding: 2,
                                borderRadius: 1,
                                overflow: 'auto',
                                fontSize: '0.875rem',
                                fontFamily: 'monospace',
                                border: '1px solid',
                                borderColor: 'divider'
                              }}
                            >
                              {children}
                            </Box>
                          )
                        }}
                      >
                        {vulnerability.description}
                      </ReactMarkdown>
                    </Paper>
                  </Box>
                )}
              </Stack>
            </CardContent>
          </Card>
        </Box>
      )}
    </Box>
  );
};
import { FC, useState, useEffect } from 'react';
import { PieChart } from '@mui/x-charts/PieChart';
import { Box, Typography, Paper, CircularProgress, Alert, Button, ButtonGroup } from '@mui/material';
import { useVulnerabilityStatistics, FilterType } from './hooks/home.hook';

interface VulnerabilityPieChartProps {
  height?: number;
  width?: number;
}

export const VulnerabilityPieChart: FC<VulnerabilityPieChartProps> = ({ 
  height = 400, 
  width = 400,
}) => {
  const realData = useVulnerabilityStatistics();
  const [activeFilter, setActiveFilter] = useState<FilterType>('severity');
  
  const { pieChartData, loading, error, updatePieChartData } = realData;

  const handleFilterChange = (filterType: FilterType) => {
    setActiveFilter(filterType);
    updatePieChartData(filterType);
  };

  // Ensure initial data is loaded with the correct filter
  useEffect(() => {
    if (!loading && pieChartData.length === 0) {
      updatePieChartData(activeFilter);
    }
  }, [loading, pieChartData.length, activeFilter, updatePieChartData]);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height={height}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height={height}>
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  if (pieChartData.length === 0) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height={height}>
        <Typography variant="body1" color="text.secondary">
          No vulnerability data available
        </Typography>
      </Box>
    );
  }

  return (
    <Paper 
      elevation={3}
      sx={{
        p: 3,
        borderRadius: 2,
        backgroundColor: 'transparent',
        backdropFilter: 'blur(10px)',
        backgroundImage: 'none',
        boxShadow: 'none',
      }}
    >
      <Box display="flex" justifyContent="center">
        <PieChart
          sx={{
            '& .MuiChartsLegend-root': {
              fontSize: '22px',
            },
          }}
          series={[
            {
              data: pieChartData.map(item => ({
                id: item.id,
                value: item.value,
                label: item.label,
                color: item.color
              })),
            },
          ]}
          height={height}
          width={width}
        />
        <Box>
          <Typography variant="h3" color="text.primary">
            ISSUES IN PORTAL
          </Typography>
          <ButtonGroup 
            variant="outlined" 
            size="small" 
            sx={{ 
              mt: 2,
              '& .MuiButton-root': {
                color: 'text.primary',
                borderColor: 'divider',
                '&:hover': {
                  borderColor: 'primary.main',
                  backgroundColor: 'rgba(25, 118, 210, 0.04)',
                },
                '&.Mui-selected': {
                  backgroundColor: 'primary.main',
                  color: 'white',
                  '&:hover': {
                    backgroundColor: 'primary.dark',
                  },
                },
              },
            }}
          >
            <Button 
              onClick={() => handleFilterChange('severity')}
              sx={{
                backgroundColor: activeFilter === 'severity' ? 'primary.main' : 'transparent',
                color: activeFilter === 'severity' ? '#1e1e1e !important' : 'text.primary',
                '&:hover': {
                  backgroundColor: activeFilter === 'severity' ? 'primary.dark' : 'rgba(25, 118, 210, 0.04)',
                },
              }}
            >
              By Severity
            </Button>
            <Button 
              onClick={() => handleFilterChange('category')}
              sx={{
                backgroundColor: activeFilter === 'category' ? 'primary.main' : 'transparent',
                color: activeFilter === 'category' ? '#1e1e1e !important' : 'text.primary',
                '&:hover': {
                  backgroundColor: activeFilter === 'category' ? 'primary.dark' : 'rgba(25, 118, 210, 0.04)',
                },
              }}
            >
              By Category
            </Button>
            <Button 
              onClick={() => handleFilterChange('project')}
              sx={{
                backgroundColor: activeFilter === 'project' ? 'primary.main' : 'transparent',
                color: activeFilter === 'project' ? '#1e1e1e !important' : 'text.primary',
                '&:hover': {
                  backgroundColor: activeFilter === 'project' ? 'primary.dark' : 'rgba(25, 118, 210, 0.04)',
                },
              }}
            >
              By Project
            </Button>
            <Button 
              onClick={() => handleFilterChange('source')}
              sx={{
                backgroundColor: activeFilter === 'source' ? 'primary.main' : 'transparent',
                color: activeFilter === 'source' ? '#1e1e1e !important' : 'text.primary',
                '&:hover': {
                  backgroundColor: activeFilter === 'source' ? 'primary.dark' : 'rgba(25, 118, 210, 0.04)',
                },
              }}
            >
              By Source
            </Button>
          </ButtonGroup>
        </Box>
      </Box>
    </Paper>
  );
}; 
import { FC, useState, useEffect } from 'react';
import { PieChart } from '@mui/x-charts/PieChart';
import { Box, Typography, Paper, CircularProgress, Alert, Button, ButtonGroup, useTheme, useMediaQuery } from '@mui/material';
import { useVulnerabilityStatistics, FilterType } from './hooks/home.hook';

interface VulnerabilityPieChartProps {
  height?: number;
  width?: number;
}

export const VulnerabilityPieChart: FC<VulnerabilityPieChartProps> = ({ 
  height = 400, 
  width = 400,
}) => {
  const theme = useTheme();
  const isSmallScreen = useMediaQuery(theme.breakpoints.down('md'));
  const realData = useVulnerabilityStatistics();
  const [activeFilter, setActiveFilter] = useState<FilterType>('severity');
  
  const { pieChartData, loading, error, updatePieChartData } = realData;

  // Calculate responsive dimensions
  const chartHeight = isSmallScreen ? Math.min(height, 300) : height;
  const chartWidth = isSmallScreen ? Math.min(width, 350) : width;

  const handleFilterChange = (filterType: FilterType) => {
    setActiveFilter(filterType);
    updatePieChartData(filterType);
  };

  // Ensure initial data is loaded with the correct filter
  useEffect(() => {
    if (!loading && pieChartData.length === 0) {
      updatePieChartData(activeFilter);
    }
  }, [loading, pieChartData.length, activeFilter, updatePieChartData]);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height={height}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height={height}>
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  if (pieChartData.length === 0) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height={height}>
        <Typography variant="body1" color="text.secondary">
          No vulnerability data available
        </Typography>
      </Box>
    );
  }

  return (
    <Paper 
      elevation={3}
      sx={{
        p: isSmallScreen ? 2 : 3,
        borderRadius: 2,
        backgroundColor: 'transparent',
        backdropFilter: 'blur(10px)',
        backgroundImage: 'none',
        boxShadow: 'none',
        overflow: 'hidden',
      }}
    >
      <Box 
        display="flex" 
        flexDirection={isSmallScreen ? 'column' : 'row'}
        justifyContent="center" 
        alignItems="flex-start"
        gap={isSmallScreen ? 2 : 3}
      >
        <Box display="flex" justifyContent="center">
          <PieChart
            sx={{
              '& .MuiChartsLegend-root': {
                fontSize: isSmallScreen ? '16px' : '22px',
                width: isSmallScreen ? '250px !important' : '300px !important',
                color: 'primary.contrastText',
              },
              '& .MuiChartsTooltip-container': {
                color: 'primary.contrastText', //FIXME isn't applied
              },
            }}
            series={[{
              data: pieChartData.sort((a, b) => b.value - a.value).map(item => ({
                id: item.id,
                value: item.value,
                label: item.label,
                  color: item.color
                })),
              },
            ]}
            height={chartHeight}
            width={chartWidth}
          />
        </Box>
        
        <Box 
          display="flex" 
          flexDirection="column" 
          alignItems="center"
          textAlign="center"
        >
          <Typography 
            variant={isSmallScreen ? "h5" : "h4"} 
            color="primary.contrastText"
            sx={{ mb: isSmallScreen ? 1 : 2 }}
          >
            ISSUES IN PORTAL
          </Typography>
          
          <ButtonGroup 
            variant="outlined" 
            size="small" 
            orientation={isSmallScreen ? "vertical" : "horizontal"}
            sx={{ 
              '& .MuiButton-root': {
                color: 'text.primary',
                borderColor: 'divider',
                fontSize: isSmallScreen ? '0.75rem' : '0.875rem',
                minWidth: isSmallScreen ? '120px' : 'auto',
                '&:hover': {
                  borderColor: 'primary.main',
                  backgroundColor: 'rgba(25, 118, 210, 0.04)',
                },
                '& .Mui-selected': {
                  backgroundColor: 'primary.main',
                  color: 'white',
                  '&:hover': {
                    backgroundColor: 'primary.dark',
                  },
                },
              },
            }}
          >
            <Button 
              onClick={() => handleFilterChange('severity')}
              sx={{
                backgroundColor: activeFilter === 'severity' ? 'primary.main' : 'transparent',
                color: activeFilter === 'severity' ? '#1e1e1e !important' : 'text.primary',
                '&:hover': {
                  backgroundColor: activeFilter === 'severity' ? 'rgba(250, 250, 250, 0.1) !important' : 'rgba(25, 118, 210, 0.04)',
                  color: 'white !important',
                },
              }}
            >
              By Severity
            </Button>
            <Button 
              onClick={() => handleFilterChange('category')}
              sx={{
                backgroundColor: activeFilter === 'category' ? 'primary.main' : 'transparent',
                color: activeFilter === 'category' ? '#1e1e1e !important' : 'text.primary',
                '&:hover': {
                  backgroundColor: activeFilter === 'category' ? 'rgba(250, 250, 250, 0.1) !important' : 'rgba(25, 118, 210, 0.04)',
                  color: 'white !important',
                },
              }}
            >
              By Tag
            </Button>
            {/* <Button 
              onClick={() => handleFilterChange('protocol')}
              sx={{
                backgroundColor: activeFilter === 'protocol' ? 'primary.main' : 'transparent',
                color: activeFilter === 'protocol' ? '#1e1e1e !important' : 'text.primary',
                '&:hover': {
                  backgroundColor: activeFilter === 'protocol' ? 'rgba(250, 250, 250, 0.1) !important' : 'rgba(25, 118, 210, 0.04)',
                  color: 'white !important',
                },
              }}
            >
              By Protocol
            </Button> */}
          </ButtonGroup>
        </Box>
      </Box>
    </Paper>
  );
}; 
import { FC, useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Link,
  Pagination,
  SelectChangeEvent,
  useTheme,
  CircularProgress,
  Alert,
  useMediaQuery,
  Drawer,
  AppBar,
  Toolbar,
} from '@mui/material';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';
import FilterListIcon from '@mui/icons-material/FilterList';
import { Vulnerability } from '../../../../api/soroban-security-portal/models/vulnerability';
import { VulnerabilitySeverity, VulnerabilitySource } from '../../../../api/soroban-security-portal/models/vulnerability';
import { ProtocolItem } from '../../../../api/soroban-security-portal/models/protocol.ts';
import { CategoryItem } from '../../../../api/soroban-security-portal/models/category';
import { useNavigate } from 'react-router-dom';
import { getVulnerabilitiesCall, getSeveritiesCall, getCategoriesCall, getProtocolListDataCall, getSourceCall, getVulnerabilitiesTotalCall } from '../../../../api/soroban-security-portal/soroban-security-portal-api';
import { VulnerabilitySearch } from '../../../../api/soroban-security-portal/models/vulnerability';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import remarkMath from 'remark-math';
import remarkParse from 'remark-parse';
import remarkRehype from 'remark-rehype';
import rehypeRaw from 'rehype-raw';
import { CodeBlock } from '../../../../components/CodeBlock.tsx';

interface VulnerabilityTableProps {
  height?: number;
  width?: number;
}

interface VulnerabilityRowProps {
  vulnerability: Vulnerability;
  isExpanded: boolean;
  onToggleExpand: () => void;
  onCategoryClick: (category: string) => void;
  onSeverityClick: (severity: string) => void;
  onProtocolClick: (protocol: string) => void;
  onSourceClick: (source: string) => void;
}

const VulnerabilityRow: FC<VulnerabilityRowProps> = ({ 
  vulnerability, 
  isExpanded, 
  onToggleExpand,
  onCategoryClick,
  onSeverityClick,
  onProtocolClick,
}) => {
  const theme = useTheme();
  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return '#c72e2b95';
      case 'high': return '#FF6B3D95';
      case 'medium': return '#FFD84D95';
      case 'low': return '#569E6795';
      case 'note': return '#72F1FF95';
      default: return theme.palette.grey[400];
    }
  };

  return (
    <>
      <TableRow sx={{ 
        '&:hover': { backgroundColor: theme.palette.action.hover },
        borderBottom: `1px solid ${theme.palette.divider}`
      }}>
        <TableCell sx={{ border: 'none', padding: '8px 12px', width: 40 }}>
          <IconButton
            onClick={onToggleExpand}
            size="small"
            sx={{ color: theme.palette.text.primary, padding: 0 }}
          >
            {isExpanded ? <KeyboardArrowDownIcon /> : <KeyboardArrowRightIcon />}
          </IconButton>
        </TableCell>
        <TableCell sx={{ border: 'none', padding: '8px 12px' }}>
          <Typography
            sx={{
              overflow: 'hidden',
              textOverflow: 'ellipsis',
              whiteSpace: 'nowrap',
              maxWidth: { xs: '120px', sm: '200px', md: '280px' },
              fontSize: { xs: '0.75rem', sm: '0.875rem' },
            }}
            title={vulnerability.title} 
          >
            {vulnerability.title}
          </Typography>
        </TableCell>
        <TableCell sx={{ border: 'none', padding: '8px 12px' }}>
          <Link
            href="#"
            onClick={(e) => {
              e.preventDefault();
              onCategoryClick(vulnerability.categories[0]);
            }}
            sx={{
              color: theme.palette.primary.main,
              textDecoration: 'underline',
              cursor: 'pointer',
              fontSize: { xs: '0.75rem', sm: '0.875rem' },
              '&:hover': { color: theme.palette.primary.light }
            }}
          >
            {vulnerability.categories.join(', ')}
          </Link>
        </TableCell>
        <TableCell sx={{ border: 'none', padding: '8px 12px' }}>
          <Typography
            onClick={() => onSeverityClick(vulnerability.severity)}
            sx={{
              color: getSeverityColor(vulnerability.severity),
              fontWeight: 600,
              fontSize: { xs: '0.75rem', sm: '0.875rem' },
              cursor: 'pointer',
              '&:hover': {
                opacity: 0.8,
              },
            }}
          >
            {vulnerability.severity}
          </Typography>
        </TableCell>
        <TableCell sx={{ border: 'none', padding: '8px 12px', color: theme.palette.text.secondary }}>
          <Link
            href="#"
            onClick={(e) => {
              e.preventDefault();
              onProtocolClick(vulnerability.protocol);
            }}
            sx={{
              color: theme.palette.text.secondary,
              textDecoration: 'underline',
              cursor: 'pointer',
              fontSize: { xs: '0.75rem', sm: '0.875rem' },
              '&:hover': { color: theme.palette.text.primary }
            }}
          >
            {vulnerability.protocol}
          </Link>
        </TableCell>
      </TableRow>
      {isExpanded && (
        <TableRow sx={{ borderBottom: `1px solid ${theme.palette.divider}` }}>
          <TableCell colSpan={5} sx={{ border: 'none', padding: '0 12px 8px 40px' }}>
            <Typography
              variant="body2"
              component="div"
              sx={{
                color: theme.palette.text.secondary,
                fontSize: { xs: '0.75rem', sm: '0.875rem' },
                lineHeight: 1.5,
              }}
            >
              <ReactMarkdown
                skipHtml={false}
                remarkPlugins={[remarkParse, remarkGfm, remarkMath, remarkRehype]}
                rehypePlugins={[rehypeRaw]}
                components={{
                  code: (props) => {
                    const { node, className, children, ...rest } = props;
                    const inline = (props as any).inline;
                    const match = /language-(\w+)/.exec(className || '');
                    if (!inline && match) {
                      return (
                        <CodeBlock className={className} {...rest}>
                          {String(children).replace(/\n$/, '')}
                        </CodeBlock>
                      );
                    } else {
                      return (
                        <CodeBlock className={className} inline={true} {...rest}>
                          {String(children).replace(/\n$/, '')}
                        </CodeBlock>
                      );
                    }
                  }
                }}
              >
                {vulnerability.description}
              </ReactMarkdown>
            </Typography>
          </TableCell>
        </TableRow>
      )}
    </>
  );
};

export const VulnerabilityTable: FC<VulnerabilityTableProps> = ({ 
  height = 600,
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [expandedRows, setExpandedRows] = useState<Set<number>>(new Set());
  const [currentPage, setCurrentPage] = useState(1);
  const [category, setCategory] = useState('');
  const [severity, setSeverity] = useState('');
  const [protocol, setProtocol] = useState('');
  const [source, setSource] = useState('');
  const [filterDrawerOpen, setFilterDrawerOpen] = useState(false);
  const navigate = useNavigate();

  // Real data state
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [severitiesList, setSeveritiesList] = useState<VulnerabilitySeverity[]>([]);
  const [categoriesList, setCategoriesList] = useState<CategoryItem[]>([]);
  const [protocolsList, setProtocolsList] = useState<ProtocolItem[]>([]);
  const [sourceList, setSourceList] = useState<VulnerabilitySource[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [totalItems, setTotalItems] = useState(0);

  const itemsPerPage = isMobile ? 5 : 7;
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  // Load filter options
  const loadFilterOptions = async () => {
    try {
      const [severities, categories, protocols, sources] = await Promise.all([
        getSeveritiesCall(),
        getCategoriesCall(),
        getProtocolListDataCall(),
        getSourceCall()
      ]);
      
      setSeveritiesList(severities);
      setCategoriesList(categories);
      setProtocolsList(protocols);
      setSourceList(sources);
    } catch (err) {
      console.error('Error loading filter options:', err);
    }
  };

  // Load vulnerabilities with filters
  const loadVulnerabilities = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const searchParams: VulnerabilitySearch = {
        severities: severity ? [severity] : undefined,
        categories: category ? [category] : undefined,
        protocols: protocol ? [protocol] : undefined,
        sources: source ? [source] : undefined,
        pageSize: 10,
        page: currentPage,
      };
      
      const vulns = await getVulnerabilitiesCall(searchParams);
      setVulnerabilities(vulns);
      const totalVulns = await getVulnerabilitiesTotalCall(searchParams);
      setTotalItems(totalVulns);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load vulnerabilities');
      console.error('Error loading vulnerabilities:', err);
    } finally {
      setLoading(false);
    }
  };

  // Load data on component mount
  useEffect(() => {
    loadFilterOptions();
    loadVulnerabilities();
  }, []);

  // Reload vulnerabilities when filters change
  useEffect(() => {
    if (!loading) {
      setCurrentPage(1); // Reset to first page when filters change
      loadVulnerabilities();
    }
  }, [category, severity, protocol, source]);

  const handleToggleExpand = (id: number) => {
    setExpandedRows(prev => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  const handlePageChange = (_: React.ChangeEvent<unknown>, page: number) => {
    setCurrentPage(page);
  };

  // Click handlers for table cells
  const handleCategoryClick = (category: string) => {
    setCategory(category);
    if (isMobile) setFilterDrawerOpen(false);
  };

  const handleSeverityClick = (severity: string) => {
    setSeverity(severity);
    if (isMobile) setFilterDrawerOpen(false);
  };

  const handleProtocolClick = (protocol: string) => {
    setProtocol(protocol);
    if (isMobile) setFilterDrawerOpen(false);
  };

  const handleSourceClick = (source: string) => {
    setSource(source);
    if (isMobile) setFilterDrawerOpen(false);
  };

  // Get paginated vulnerabilities
  const getPaginatedVulnerabilities = () => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return vulnerabilities.slice(startIndex, endIndex);
  };

  // Function to navigate to vulnerabilities page with current filters
  const navigateToVulnerabilitiesWithFilters = () => {
    const searchParams = new URLSearchParams();
    
    if (category) searchParams.set('category', category);
    if (severity) searchParams.set('severity', severity);
    if (protocol) searchParams.set('protocol', protocol);
    if (source) searchParams.set('source', source);
    
    const queryString = searchParams.toString();
    const url = queryString ? `/vulnerabilities?${queryString}` : '/vulnerabilities';
    
    console.log('Navigating to vulnerabilities with filters:', {
      category,
      severity,
      protocol,
      source,
      url
    });
    
    navigate(url);
  };

  // Filter sidebar component
  const FilterSidebar = () => (
    <Box
      sx={{
        display: 'flex',
        flexDirection: 'column',
        gap: 3,
        padding: isMobile ? '16px' : '24px',
        paddingTop: isMobile ? '16px' : '0px',
        width: isMobile ? '100%' : '280px',
        minWidth: isMobile ? 'auto' : '280px',
      }}
    >
      <FormControl fullWidth>
        <InputLabel sx={{ color: theme.palette.text.primary }}>Tag</InputLabel>
        <Select
          label="Tag"
          value={category}
          onChange={(e: SelectChangeEvent) => setCategory(e.target.value)}
          sx={{
            color: theme.palette.text.primary,
            '& .MuiOutlinedInput-notchedOutline': {
              borderColor: theme.palette.divider,
            },
            '&:hover .MuiOutlinedInput-notchedOutline': {
              borderColor: theme.palette.primary.main,
            },
            '& .MuiSelect-icon': {
              color: theme.palette.text.primary,
            },
          }}
        >
          <MenuItem value="">All Tags</MenuItem>
          {categoriesList.map((cat) => (
            <MenuItem key={cat.id} value={cat.name}>
              {cat.name}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      <FormControl fullWidth>
        <InputLabel sx={{ color: theme.palette.text.primary }}>Severity</InputLabel>
        <Select
          label="Severity"
          value={severity}
          onChange={(e: SelectChangeEvent) => setSeverity(e.target.value)}
          sx={{
            color: theme.palette.text.primary,
            '& .MuiOutlinedInput-notchedOutline': {
              borderColor: theme.palette.divider,
            },
            '&:hover .MuiOutlinedInput-notchedOutline': {
              borderColor: theme.palette.primary.main,
            },
            '& .MuiSelect-icon': {
              color: theme.palette.text.primary,
            },
          }}
        >
          <MenuItem value="">All Severities</MenuItem>
          {severitiesList.map((sev) => (
            <MenuItem key={sev.id} value={sev.name}>
              {sev.name}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      <FormControl fullWidth>
        <InputLabel sx={{ color: theme.palette.text.primary }}>Protocol</InputLabel>
        <Select
          label="Protocol"
          value={protocol}
          onChange={(e: SelectChangeEvent) => setProtocol(e.target.value)}
          sx={{
            color: theme.palette.text.primary,
            '& .MuiOutlinedInput-notchedOutline': {
              borderColor: theme.palette.divider,
            },
            '&:hover .MuiOutlinedInput-notchedOutline': {
              borderColor: theme.palette.primary.main,
            },
            '& .MuiSelect-icon': {
              color: theme.palette.text.primary,
            },
          }}
        >
          <MenuItem value="">All Protocols</MenuItem>
          {protocolsList.map((proj) => (
            <MenuItem key={proj.id} value={proj.name}>
              {proj.name}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      <FormControl fullWidth>
        <InputLabel sx={{ color: theme.palette.text.primary }}>Source</InputLabel>
        <Select
          label="Source"
          value={source}
          onChange={(e: SelectChangeEvent) => setSource(e.target.value)}
          sx={{
            color: theme.palette.text.primary,
            '& .MuiOutlinedInput-notchedOutline': {
              borderColor: theme.palette.divider,
            },
            '&:hover .MuiOutlinedInput-notchedOutline': {
              borderColor: theme.palette.primary.main,
            },
            '& .MuiSelect-icon': {
              color: theme.palette.text.primary,
            },
          }}
        >
          <MenuItem value="">All Sources</MenuItem>
          {sourceList.map((src) => (
            <MenuItem key={src.id} value={src.name}>
              {src.name}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      <Button
        variant="contained"
        sx={{
          textTransform: 'none',
          fontWeight: 600,
          padding: '12px',
          marginTop: isMobile ? '16px' : '100px',
        }}
        onClick={navigateToVulnerabilitiesWithFilters}
      >
        Search in Portal
      </Button>
    </Box>
  );

  if (loading && vulnerabilities.length === 0) {
    return (
      <Box
        sx={{
          width: '100%',
          height: height,
          backgroundColor: theme.palette.background.paper,
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          borderRadius: 2,
        }}
      >
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box
        sx={{
          width: '100%',
          height: height,
          backgroundColor: theme.palette.background.paper,
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          borderRadius: 2,
        }}
      >
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  return (
    <Box
      sx={{
        width: '100%',
        height: height,
        backgroundColor: theme.palette.background.paper,
        color: theme.palette.text.primary,
        display: 'flex',
        flexDirection: 'column',
        borderRadius: 2,
        overflow: 'hidden',
      }}
    >
      {/* Header */}
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          padding: { xs: '16px', sm: '24px 32px' },
          paddingBottom: { xs: '16px' },
          flexWrap: 'wrap',
          gap: 2,
        }}
      >
        <Typography
          variant="h4"
          sx={{
            fontSize: { xs: '1.5rem', sm: '2rem', md: '2.125rem' },
          }}
        >
          WARP TO VULNERABILITIES
        </Typography>
        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
          {isMobile && (
            <Button
              variant="outlined"
              startIcon={<FilterListIcon />}
              onClick={() => setFilterDrawerOpen(true)}
              sx={{ textTransform: 'none' }}
            >
              Filters
            </Button>
          )}
          <Button
            variant="contained"
            sx={{
              textTransform: 'none',
              fontWeight: 600,
              padding: { xs: '8px 16px', sm: '12px 24px' },
              fontSize: { xs: '0.875rem', sm: '1rem' },
            }}
            onClick={navigateToVulnerabilitiesWithFilters}
            endIcon={<ArrowForwardIcon />}
          >
            {isMobile ? 'Full List' : 'Full list of Vulnerabilities'}
          </Button>
        </Box>
      </Box>

      {/* Main Content */}
      <Box sx={{ display: 'flex', flex: 1, overflow: 'hidden', pt: 3 }}>
        {/* Left Sidebar - Filters (Desktop) */}
        {!isMobile && (
          <FilterSidebar />
        )}

        {/* Right Content - Table */}
        <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column', minWidth: 0 }}>
          {loading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flex: 1 }}>
              <CircularProgress />
            </Box>
          ) : vulnerabilities.length === 0 ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flex: 1 }}>
              <Typography variant="body1" color="text.secondary">
                No vulnerabilities found
              </Typography>
            </Box>
          ) : (
            <>
              <TableContainer
                sx={{
                  backgroundColor: 'transparent',
                  boxShadow: 'none',
                  flex: 1,
                  maxHeight: 'calc(100vh - 300px)',
                  overflowX: 'auto',
                }}
              >
                <Table sx={{ minWidth: { xs: 400, sm: 300, md: 250, lg: 200 } }} stickyHeader>
                  <TableHead>
                    <TableRow sx={{ backgroundColor: '#DACFE6' }}>
                      <TableCell sx={{ border: 'none', padding: '8px 12px', width: 40, backgroundColor: '#DACFE6' }}></TableCell>
                      <TableCell sx={{ border: 'none', padding: '8px 12px', color: '#1A1A1A', fontWeight: 900, backgroundColor: '#DACFE6', fontSize: { xs: '0.75rem', sm: '0.875rem' } }}>
                        Name
                      </TableCell>
                      <TableCell sx={{ border: 'none', padding: '8px 12px', color: '#1A1A1A', fontWeight: 900, backgroundColor: '#DACFE6', fontSize: { xs: '0.75rem', sm: '0.875rem' } }}>
                        Tags
                      </TableCell>
                      <TableCell sx={{ border: 'none', padding: '8px 12px', color: '#1A1A1A', fontWeight: 900, backgroundColor: '#DACFE6', fontSize: { xs: '0.75rem', sm: '0.875rem' } }}>
                        Severity
                      </TableCell>
                      <TableCell sx={{ border: 'none', padding: '8px 12px', color: '#1A1A1A', fontWeight: 900, backgroundColor: '#DACFE6', fontSize: { xs: '0.75rem', sm: '0.875rem' } }}>
                        Protocol
                      </TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {getPaginatedVulnerabilities().map((vulnerability) => (
                      <VulnerabilityRow
                        key={vulnerability.id}
                        vulnerability={vulnerability}
                        isExpanded={expandedRows.has(vulnerability.id)}
                        onToggleExpand={() => handleToggleExpand(vulnerability.id)}
                        onCategoryClick={handleCategoryClick}
                        onSeverityClick={handleSeverityClick}
                        onProtocolClick={handleProtocolClick}
                        onSourceClick={handleSourceClick}
                      />
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>

              {/* Pagination */}
              {totalPages > 1 && (
                <Box
                  sx={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    padding: { xs: '12px 16px', sm: '16px 24px' },
                    borderTop: `1px solid ${theme.palette.divider}`,
                    flexWrap: 'wrap',
                    gap: 1,
                  }}
                >
                  <Typography sx={{ color: theme.palette.text.secondary, fontSize: { xs: '0.75rem', sm: '0.875rem' } }}>
                    {`${(currentPage - 1) * itemsPerPage + 1}-${Math.min(currentPage * itemsPerPage, totalItems)} of ${totalItems}`}
                  </Typography>
                  <Pagination
                    count={totalPages}
                    page={currentPage}
                    onChange={handlePageChange}
                    size={isMobile ? "small" : "medium"}
                    sx={{
                      '& .MuiPaginationItem-root': {
                        color: theme.palette.text.primary,
                        fontSize: { xs: '0.75rem', sm: '0.875rem' },
                        '&.Mui-selected': {
                          backgroundColor: theme.palette.primary.dark,
                        },
                        '&:hover': {
                          backgroundColor: theme.palette.action.hover,
                        },
                      },
                    }}
                  />
                </Box>
              )}
            </>
          )}
        </Box>
      </Box>

      {/* Mobile Filter Drawer */}
      {isMobile && (
        <Drawer
          anchor="left"
          open={filterDrawerOpen}
          onClose={() => setFilterDrawerOpen(false)}
          sx={{
            '& .MuiDrawer-paper': {
              width: '280px',
              backgroundColor: theme.palette.background.paper,
            },
          }}
        >
          <AppBar position="static" elevation={0} sx={{ backgroundColor: '#DACFE6' }}>
            <Toolbar>
              <Typography variant="h6" sx={{ color: '#1A1A1A', fontWeight: 900 }}>
                Filters
              </Typography>
            </Toolbar>
          </AppBar>
          <FilterSidebar />
        </Drawer>
      )}
    </Box>
  );
};

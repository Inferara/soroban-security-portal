import { FC, useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Link,
  Pagination,
  SelectChangeEvent,
  useTheme,
  CircularProgress,
  Alert,
} from '@mui/material';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';
import { Vulnerability } from '../../../../api/soroban-security-portal/models/vulnerability';
import { VulnerabilitySeverity, VulnerabilitySource } from '../../../../api/soroban-security-portal/models/vulnerability';
import { ProjectItem } from '../../../../api/soroban-security-portal/models/project';
import { CategoryItem } from '../../../../api/soroban-security-portal/models/category';
import { useNavigate } from 'react-router-dom';
import { getVulnerabilitiesCall, getSeveritiesCall, getCategoriesCall, getProjectListDataCall, getSourceCall } from '../../../../api/soroban-security-portal/soroban-security-portal-api';
import { VulnerabilitySearch } from '../../../../api/soroban-security-portal/models/vulnerability';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import remarkMath from 'remark-math';
import remarkParse from 'remark-parse';
import remarkRehype from 'remark-rehype';
import rehypeRaw from 'rehype-raw';
import { CodeBlock } from '../../../../components/CodeBlock.tsx';

interface VulnerabilityTableProps {
  height?: number;
  width?: number;
}

interface VulnerabilityRowProps {
  vulnerability: Vulnerability;
  isExpanded: boolean;
  onToggleExpand: () => void;
  onCategoryClick: (category: string) => void;
  onSeverityClick: (severity: string) => void;
  onProjectClick: (project: string) => void;
  onSourceClick: (source: string) => void;
}

const VulnerabilityRow: FC<VulnerabilityRowProps> = ({ 
  vulnerability, 
  isExpanded, 
  onToggleExpand,
  onCategoryClick,
  onSeverityClick,
  onProjectClick,
  onSourceClick
}) => {
  const theme = useTheme();
  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return '#c72e2b95';
      case 'high': return '#FF6B3D95';
      case 'medium': return '#FFD84D95';
      case 'low': return '#569E6795';
      case 'note': return '#72F1FF95';
      default: return theme.palette.grey[400];
    }
  };

  return (
    <>
      <TableRow sx={{ 
        '&:hover': { backgroundColor: theme.palette.action.hover },
        borderBottom: `1px solid ${theme.palette.divider}`
      }}>
        <TableCell sx={{ border: 'none', padding: '12px 16px' }}>
          <IconButton
            onClick={onToggleExpand}
            size="small"
            sx={{ color: theme.palette.text.primary, padding: 0 }}
          >
            {isExpanded ? <KeyboardArrowDownIcon /> : <KeyboardArrowRightIcon />}
          </IconButton>
        </TableCell>
        <TableCell sx={{ border: 'none', padding: '12px 16px' }}>
          <Link
            href="#"
            onClick={(e) => {
              e.preventDefault();
              onCategoryClick(vulnerability.categories[0]);
            }}
            sx={{
              color: theme.palette.primary.main,
              textDecoration: 'underline',
              cursor: 'pointer',
              '&:hover': { color: theme.palette.primary.light }
            }}
          >
            {vulnerability.categories.join(', ')}
          </Link>
        </TableCell>
        <TableCell sx={{ border: 'none', padding: '12px 16px' }}>
          <Typography
            onClick={() => onSeverityClick(vulnerability.severity)}
            sx={{
              color: getSeverityColor(vulnerability.severity),
              fontWeight: 600,
              fontSize: '0.875rem',
              cursor: 'pointer',
              '&:hover': {
                opacity: 0.8,
              },
            }}
          >
            {vulnerability.severity}
          </Typography>
        </TableCell>
        <TableCell sx={{ border: 'none', padding: '12px 16px', color: theme.palette.text.secondary }}>
          <Link
            href="#"
            onClick={(e) => {
              e.preventDefault();
              onProjectClick(vulnerability.project);
            }}
            sx={{
              color: theme.palette.text.secondary,
              textDecoration: 'underline',
              cursor: 'pointer',
              '&:hover': { color: theme.palette.text.primary }
            }}
          >
            {vulnerability.project}
          </Link>
        </TableCell>
        <TableCell sx={{ border: 'none', padding: '12px 16px' }}>
          <Link
            href="#"
            onClick={(e) => {
              e.preventDefault();
              onSourceClick(vulnerability.source);
            }}
            sx={{
              color: theme.palette.primary.main,
              textDecoration: 'underline',
              cursor: 'pointer',
              '&:hover': { color: theme.palette.primary.light }
            }}
          >
            {vulnerability.source}
          </Link>
        </TableCell>
      </TableRow>
      {isExpanded && (
        <TableRow sx={{ borderBottom: `1px solid ${theme.palette.divider}` }}>
          <TableCell colSpan={5} sx={{ border: 'none', padding: '0 16px 12px 48px' }}>
            <Typography
              variant="body2"
              sx={{
                color: theme.palette.text.secondary,
                fontSize: '0.875rem',
                lineHeight: 1.5,
              }}
            >
              <ReactMarkdown
                skipHtml={false}
                remarkPlugins={[remarkParse, remarkGfm, remarkMath, remarkRehype]}
                rehypePlugins={[rehypeRaw]}
                components={{
                  code: (props) => {
                    const { node, className, children, ...rest } = props;
                    const inline = (props as any).inline;
                    const match = /language-(\w+)/.exec(className || '');
                    if (!inline && match) {
                      return (
                        <CodeBlock className={className} {...rest}>
                          {String(children).replace(/\n$/, '')}
                        </CodeBlock>
                      );
                    } else {
                      return (
                        <CodeBlock className={className} inline={true} {...rest}>
                          {String(children).replace(/\n$/, '')}
                        </CodeBlock>
                      );
                    }
                  }
                }}
              >
                {vulnerability.description}
              </ReactMarkdown>
            </Typography>
          </TableCell>
        </TableRow>
      )}
    </>
  );
};

export const VulnerabilityTable: FC<VulnerabilityTableProps> = ({ 
  height = 600,
  width = 1200
}) => {
  const theme = useTheme();
  const [expandedRows, setExpandedRows] = useState<Set<number>>(new Set());
  const [currentPage, setCurrentPage] = useState(1);
  const [category, setCategory] = useState('');
  const [severity, setSeverity] = useState('');
  const [project, setProject] = useState('');
  const [source, setSource] = useState('');
  const navigate = useNavigate();

  // Real data state
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [severitiesList, setSeveritiesList] = useState<VulnerabilitySeverity[]>([]);
  const [categoriesList, setCategoriesList] = useState<CategoryItem[]>([]);
  const [projectsList, setProjectsList] = useState<ProjectItem[]>([]);
  const [sourceList, setSourceList] = useState<VulnerabilitySource[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [totalItems, setTotalItems] = useState(0);

  const itemsPerPage = 7;
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  // Load filter options
  const loadFilterOptions = async () => {
    try {
      const [severities, categories, projects, sources] = await Promise.all([
        getSeveritiesCall(),
        getCategoriesCall(),
        getProjectListDataCall(),
        getSourceCall()
      ]);
      
      setSeveritiesList(severities);
      setCategoriesList(categories);
      setProjectsList(projects);
      setSourceList(sources);
    } catch (err) {
      console.error('Error loading filter options:', err);
    }
  };

  // Load vulnerabilities with filters
  const loadVulnerabilities = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const searchParams: VulnerabilitySearch = {
        severities: severity ? [severity] : undefined,
        categories: category ? [category] : undefined,
        projects: project ? [project] : undefined,
        sources: source ? [source] : undefined,
      };
      
      const vulns = await getVulnerabilitiesCall(searchParams);
      setVulnerabilities(vulns);
      setTotalItems(vulns.length);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load vulnerabilities');
      console.error('Error loading vulnerabilities:', err);
    } finally {
      setLoading(false);
    }
  };

  // Load data on component mount
  useEffect(() => {
    loadFilterOptions();
    loadVulnerabilities();
  }, []);

  // Reload vulnerabilities when filters change
  useEffect(() => {
    if (!loading) {
      setCurrentPage(1); // Reset to first page when filters change
      loadVulnerabilities();
    }
  }, [category, severity, project, source]);

  const handleToggleExpand = (id: number) => {
    setExpandedRows(prev => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  const handlePageChange = (_: React.ChangeEvent<unknown>, page: number) => {
    setCurrentPage(page);
  };

  // Click handlers for table cells
  const handleCategoryClick = (category: string) => {
    setCategory(category);
  };

  const handleSeverityClick = (severity: string) => {
    setSeverity(severity);
  };

  const handleProjectClick = (project: string) => {
    setProject(project);
  };

  const handleSourceClick = (source: string) => {
    setSource(source);
  };

  // Get paginated vulnerabilities
  const getPaginatedVulnerabilities = () => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return vulnerabilities.slice(startIndex, endIndex);
  };

  // Function to navigate to vulnerabilities page with current filters
  const navigateToVulnerabilitiesWithFilters = () => {
    const searchParams = new URLSearchParams();
    
    if (category) searchParams.set('category', category);
    if (severity) searchParams.set('severity', severity);
    if (project) searchParams.set('project', project);
    if (source) searchParams.set('source', source);
    
    const queryString = searchParams.toString();
    const url = queryString ? `/vulnerabilities?${queryString}` : '/vulnerabilities';
    
    console.log('Navigating to vulnerabilities with filters:', {
      category,
      severity,
      project,
      source,
      url
    });
    
    navigate(url);
  };

  if (loading && vulnerabilities.length === 0) {
    return (
      <Box
        sx={{
          width: width,
          height: height,
          backgroundColor: theme.palette.background.paper,
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          borderRadius: 2,
        }}
      >
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box
        sx={{
          width: width,
          height: height,
          backgroundColor: theme.palette.background.paper,
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          borderRadius: 2,
        }}
      >
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  return (
    <Box
      sx={{
        width: width,
        height: height,
        backgroundColor: theme.palette.background.paper,
        color: theme.palette.text.primary,
        display: 'flex',
        flexDirection: 'column',
        borderRadius: 2,
        overflow: 'hidden',
      }}
    >
      {/* Header */}
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          padding: '24px 32px',
          paddingBottom: '60px',
        }}
      >
        <Typography
          variant="h4"
        >
          WARP TO VULNERABILITIES
        </Typography>
        <Button
          variant="contained"
          sx={{
            textTransform: 'none',
            fontWeight: 600,
            padding: '12px 24px',
            marginTop: 'auto',
          }}
          onClick={navigateToVulnerabilitiesWithFilters}
          endIcon={<ArrowForwardIcon />}
        >
          Full list of Vulnerabilities
        </Button>
      </Box>

      {/* Main Content */}
      <Box sx={{ display: 'flex', flex: 1, overflow: 'hidden' }}>
        {/* Left Sidebar - Filters */}
        <Box
          sx={{
            width: 280,
            backgroundColor: 'transparent',
            padding: '24px',
            display: 'flex',
            flexDirection: 'column',
            paddingTop: '6px',
            gap: 3,
          }}
        >
          <FormControl fullWidth>
            <InputLabel sx={{ color: theme.palette.text.primary }}>Tag</InputLabel>
            <Select
              label="Tag"
              value={category}
              onChange={(e: SelectChangeEvent) => setCategory(e.target.value)}
              sx={{
                color: theme.palette.text.primary,
                '& .MuiOutlinedInput-notchedOutline': {
                  borderColor: theme.palette.divider,
                },
                '&:hover .MuiOutlinedInput-notchedOutline': {
                  borderColor: theme.palette.primary.main,
                },
                '& .MuiSelect-icon': {
                  color: theme.palette.text.primary,
                },
              }}
            >
              <MenuItem value="">All Categories</MenuItem>
              {categoriesList.map((cat) => (
                <MenuItem key={cat.id} value={cat.name}>
                  {cat.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl fullWidth>
            <InputLabel sx={{ color: theme.palette.text.primary }}>Severity</InputLabel>
            <Select
              label="Severity"
              value={severity}
              onChange={(e: SelectChangeEvent) => setSeverity(e.target.value)}
              sx={{
                color: theme.palette.text.primary,
                '& .MuiOutlinedInput-notchedOutline': {
                  borderColor: theme.palette.divider,
                },
                '&:hover .MuiOutlinedInput-notchedOutline': {
                  borderColor: theme.palette.primary.main,
                },
                '& .MuiSelect-icon': {
                  color: theme.palette.text.primary,
                },
              }}
            >
              <MenuItem value="">All Severities</MenuItem>
              {severitiesList.map((sev) => (
                <MenuItem key={sev.id} value={sev.name}>
                  {sev.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl fullWidth>
            <InputLabel sx={{ color: theme.palette.text.primary }}>Project</InputLabel>
            <Select
              label="Project"
              value={project}
              onChange={(e: SelectChangeEvent) => setProject(e.target.value)}
              sx={{
                color: theme.palette.text.primary,
                '& .MuiOutlinedInput-notchedOutline': {
                  borderColor: theme.palette.divider,
                },
                '&:hover .MuiOutlinedInput-notchedOutline': {
                  borderColor: theme.palette.primary.main,
                },
                '& .MuiSelect-icon': {
                  color: theme.palette.text.primary,
                },
              }}
            >
              <MenuItem value="">All Projects</MenuItem>
              {projectsList.map((proj) => (
                <MenuItem key={proj.id} value={proj.name}>
                  {proj.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl fullWidth>
            <InputLabel sx={{ color: theme.palette.text.primary }}>Source</InputLabel>
            <Select
              label="Source"
              value={source}
              onChange={(e: SelectChangeEvent) => setSource(e.target.value)}
              sx={{
                color: theme.palette.text.primary,
                '& .MuiOutlinedInput-notchedOutline': {
                  borderColor: theme.palette.divider,
                },
                '&:hover .MuiOutlinedInput-notchedOutline': {
                  borderColor: theme.palette.primary.main,
                },
                '& .MuiSelect-icon': {
                  color: theme.palette.text.primary,
                },
              }}
            >
              <MenuItem value="">All Sources</MenuItem>
              {sourceList.map((src) => (
                <MenuItem key={src.id} value={src.name}>
                  {src.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          <Button
            variant="contained"
            sx={{
              textTransform: 'none',
              fontWeight: 600,
              padding: '12px 24px',
              marginTop: 'auto',
            }}
            onClick={navigateToVulnerabilitiesWithFilters}
          >
            Search in Portal
          </Button>
        </Box>

        {/* Right Content - Table */}
        <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
          {loading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flex: 1 }}>
              <CircularProgress />
            </Box>
          ) : vulnerabilities.length === 0 ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flex: 1 }}>
              <Typography variant="body1" color="text.secondary">
                No vulnerabilities found
              </Typography>
            </Box>
          ) : (
            <>
              <TableContainer
                sx={{
                  backgroundColor: 'transparent',
                  boxShadow: 'none',
                  flex: 1,
                  maxHeight: 'calc(100vh - 300px)', // Add max height to enable scrolling
                }}
              >
                <Table sx={{ minWidth: 650, paddingTop: '6px' }} stickyHeader>
                  <TableHead>
                    <TableRow sx={{ backgroundColor: '#DACFE6', }}>
                      <TableCell sx={{ border: 'none', padding: '12px 16px', width: 50, backgroundColor: '#DACFE6' }}></TableCell>
                      <TableCell sx={{ border: 'none', padding: '12px 16px', color: '#1A1A1A', fontWeight: 900, backgroundColor: '#DACFE6' }}>
                        Tags
                      </TableCell>
                      <TableCell sx={{ border: 'none', padding: '12px 16px', color: '#1A1A1A', fontWeight: 900, backgroundColor: '#DACFE6' }}>
                        Severity
                      </TableCell>
                      <TableCell sx={{ border: 'none', padding: '12px 16px', color: '#1A1A1A', fontWeight: 900, backgroundColor: '#DACFE6' }}>
                        Project
                      </TableCell>
                      <TableCell sx={{ border: 'none', padding: '12px 16px', color: '#1A1A1A', fontWeight: 900, backgroundColor: '#DACFE6' }}>
                        Source
                      </TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {getPaginatedVulnerabilities().map((vulnerability) => (
                      <VulnerabilityRow
                        key={vulnerability.id}
                        vulnerability={vulnerability}
                        isExpanded={expandedRows.has(vulnerability.id)}
                        onToggleExpand={() => handleToggleExpand(vulnerability.id)}
                        onCategoryClick={handleCategoryClick}
                        onSeverityClick={handleSeverityClick}
                        onProjectClick={handleProjectClick}
                        onSourceClick={handleSourceClick}
                      />
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>

              {/* Pagination */}
              {totalPages > 1 && (
                <Box
                  sx={{
                    display: 'flex',
                    justifyContent: 'flex-end',
                    alignItems: 'center',
                    padding: '16px 24px',
                    borderTop: `1px solid ${theme.palette.divider}`,
                    gap: 2,
                  }}
                >
                  <Typography sx={{ color: theme.palette.text.secondary, fontSize: '0.875rem' }}>
                    {`${(currentPage - 1) * itemsPerPage + 1}-${Math.min(currentPage * itemsPerPage, totalItems)} of ${totalItems}`}
                  </Typography>
                  <Pagination
                    count={totalPages}
                    page={currentPage}
                    onChange={handlePageChange}
                    size="small"
                    sx={{
                      '& .MuiPaginationItem-root': {
                        color: theme.palette.text.primary,
                        '&.Mui-selected': {
                          backgroundColor: theme.palette.primary.dark,
                        },
                        '&:hover': {
                          backgroundColor: theme.palette.action.hover,
                        },
                      },
                    }}
                  />
                </Box>
              )}
            </>
          )}
        </Box>
      </Box>
    </Box>
  );
};
